<resources>
    <string name="app_name">LM IT School Samsung</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="topic_1">Язык Java зародился как часть проекта создания передового программного обеспечения (ПО) для различных бытовых приборов.
        Реализация проекта была начата на языке С++, но вскоре возник ряд проблем, наилучшим средством борьбы с которыми было изменение самого инструмента - языка программирования. Стало очевидным, что необходим платформо-независимый язык программирования, позволяющий создавать программы, которые не приходилось бы компилировать отдельно для каждой архитектуры и можно было бы использовать на различных процессорах под различными операционными системами.
        Рождению языка Java предшествовала довольно интересная история.
        В 1990 году разработчик ПО компании Sun Microsystems Патрик Нотон
        в команде из шести человек приступил к разработке нового объектно-ориентированного языка
        программирования, который был назван Oak (дуб), в честь дерева, росшего под окном Гослинга.
        В 1991 вышал первая версия языка под названием Oak.
        23 мая 1995 год - дата официального выпуска под названием Java.
        С 2009 года язык Java сменил своего владельца –  компания Sun Microsystems была куплена компанией Oracle. </string>
    <string name="topic_2">Все типы данных в Java разделяются на два класса — примитивные и ссылки на объекты.
        На этом занятии  рассмотрим   только примитивные типы. Примитивные типы в Java не являются объектно-ориентированными,
        они аналогичны простым типам большинства традиционных языков программирования.
        В Java имеется восемь простых типов: — byte, short, int, long, char, float, double и boolean. Их можно разделить на четыре группы:
        Целые. К ним относятся типы byte, short, int и long. Эти типы предназначены для целых чисел со знаком.
        Типы с плавающей точкой — float и double. Они служат для представления чисел, имеющих дробную часть.
        Символьный тип char. Этот тип предназначен для представления элементов из таблицы символов, например, букв или цифр.
        Логический тип boolean. Это специальный тип, используемый для представления логических величин.
 </string>
    <string name="topic_3">Одним из фундаментальных элементов многих языков программирования являются условные конструкции.
        Данные конструкции позволяют направить работу программы по одному из путей в зависимости от определенных условий.
        В языке Java используются следующие условные конструкции: if..else и switch..case
        После ключевого слова if ставится условие. И если это условие выполняется, то срабатывает код, который помещен в далее в блоке if
        после фигурных скобок.
        В качестве условий выступает операция сравнения двух чисел.
        Так как, в данном случае первое число больше второго, то выражение num1 > num2 истинно и возвращает значение true.
        Следовательно, управление переходит в блок кода после фигурных скобок и начинает выполнять содержащиеся там инструкции.
        После ключевого слова if следует условие в круглых скобках. Как и во многих других языках условие может быть реализовано:
        1. В полной форме:
        if (условие) Действия 1
        else Действия 2
        2. В краткой форме:
        if (условие) Действия 1

</string>
    <string name="topic_4"> Массив представляет набор однотипных значений. Объявление массива похоже на объявление обычной переменной,
        которая хранит одиночное значение, причем есть два способа объявления массива:
        тип_данных название_массива[];
        тип_данных[] название_массива;
        Например, определим массив чисел:
        int nums[];
        int[] nums2;
        Также можно сразу при объявлении массива инициализировать его:
        int nums[] = new int[4];    // массив из 4 чисел
        int[] nums2 = new int[5];   // массив из 5 чисел
        При подобной инициализации все элементы массива имеют значение по умолчанию.
        Например, для типа int значением по умолчанию является число 0, поэтому выше определенный массив nums будет состоять из четырех нулей.
    </string>
    <string name="topic_5">Цикл в программе организовать просто. По структуре он очень похож на if.
    Цикл в программе организовать просто. По структуре он очень похож на if.
        //ПСЕВДОКОД while (условие){ Действия (выполняются пока условие истинно)}
        Слово while в переводе с английского значит «до тех пор», «пока». Программа будет выполнять команды до тех пор, пока условие истинно.
        Проверяется условие, если оно истинно, выполняются команды, и программа переходит опять на проверку условия.
        Блок команд, расположенных после while, называют телом цикла. Так же как и в условном операторе тело цикла может представлять
        из себя один оператор либо блок операторов.
    </string>
    <string name="topic_6"> Чтобы много раз не писать один и тот же код, придумали циклы.
      Цикл for - это управляющая конструкция программного кода, которая нарушает линейность исполнения алгоритма и позволяет выполнить указанный код множество раз.
        //ПСЕВДОКОД for(инициализация; логическое выражение (условие); шаг (итерация)){
         действия }
        Цикл for проводит инициализацию перед первым шагом цикла. Затем выполняется проверка условия
        цикла, и в конце каждой итерации происходит изменение управляющей переменной.
        Любое из трёх выражений цикла (инициализация, логическое выражение или шаг) можно пропустить.
        Перед выполнением каждого шага цикла проверяется условие цикла. Если условие окажется ложным, то выполнение продолжится с инструкции, следующей за конструкцией for.
    </string>
    <string name="topic_7">Цикл do сначала выполняет код цикла, а потом проверяет условие в инструкции while. И пока это условие истинно, цикл повторяется.
        Отличие данного оператора от while только в том, что он является оператором постусловия (сначала выполнит, потом проверит).
        То есть, даже если условие не выполняется никогда, всё равно действие будет выполнено один раз.
        //ПСЕВДОКОД do { Тело цикла; } while (условие выполения);
        For-each — это разновидность цикла for, которая используется, когда нужно обработать все элементы массива или коллекции.
        “For each” с английского так и переводится — “для каждого”. Собственно, само словосочетание foreach в этом цикле не используется. Его синтаксис следующий:
        //ПСЕВДОКОД for ( тип итерационной переменной  Имя переменной : массив) { Блок операторов; }
        При выполнении такого цикла, итерационной переменной последовательно присваивается значение каждого
        элемента массива или коллекции, после чего выполняется указанный блок операторов (или оператор).

 </string>

    <string name="topic_8"> Java полностью объектно-ориентированный язык, в нем все реализовано в классах, и потому в нем нет самостоятельных (глобальных) процедур и функций,
        они всегда определяются в некотором классе. В объектно-ориентированном программировании функции и процедуры, располагающиеся внутри класса, получили другое название — методы.
        Разница только в названии. В отношении Java можно употреблять слова «функция» и «процедура», но лучше говорить «метод, возвращающий значение» и «метод, не возвращающий значения».
        Переменные и константы хранят некоторые значения, а методы содержат набор операторов, которые выполняют определенные действия.
        Чтобы определить метод в Java используют синтаксис:
        // Псевдокод [модификаторы] тип возвращаемого значения название_метода ([параметры]){ тело метода }
        Имя метода, также как и переменной:
        должно начинаться только с буквы;
        может состоять из любой последовательности строчных и прописных букв;
        может содержать символы подчеркивания (_) и знака доллара ($);
        должно учитывать регистр (например, имена MyMethod и myMethod компилятор посчитает разными именами);
        не должно совпадать с именами операторов и зарезервированных слов самого языка Java;
        не должно совпадать с именами clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait. Если только вы не хотите явно переопределить действия этих методов.
    </string>
    <string name="topic_9"> В Java существует возможность создавать несколько методов с одинаковыми именами, при этом они должны иметь разные параметры. Такой механизм называется перегрузкой.
        Метод является перегруженным в том случае, если существует несколько его реализаций с одинаковым именем, но с различной сигнатурой.
        Сигнатура метода в Java — это совокупность имени метода с набором параметров. То есть тип возвращаемого значения не входит в сигнатуру,
        а порядок следования параметров и их типы — входят. При перегрузке методов необходимо придерживаться следующих правил:
        стараться не использовать сложных вариантов перегрузки;
        заменять при возможности перегруженные методы на несколько разных методов;
        избегать произвольного изменения имен параметров в перегрузках;
        будьте последовательны при упорядочении параметров в перегружаемых методах. </string>


</resources>